resource_types:
- name: custom-resource-type
  type: mock
  source:
    mirror_self: true
    create_files:
      resource_type_secret: ((resource_type_secret))

resources:
- name: some-resource
  type: mock
  source:
    check_failure: ((check_failure))
    create_files:
      resource_secret: ((resource_secret))

- name: custom-resource
  type: custom-resource-type
  source:
    check_failure: ((check_failure))
    create_files:
      custom_resource_secret: ((resource_secret))

jobs:
- name: some-job
  plan:
  - get: some-resource
  - get: custom-resource
  - get: params-in-get
    resource: some-resource
    params:
      create_files_via_params:
        username: get ((job_secret.username))
        password: get ((job_secret.password))
  - put: params-in-put
    resource: some-resource
    params:
      version: ((resource_version))
    get_params:
      create_files_via_params:
        username: put-get ((job_secret.username))
        password: put-get ((job_secret.password))
  - get: assertion-script
    resource: some-resource
    params:
      create_files_via_params:
        assert.sh: ((assertion_script))
  - task: simple-task
    params:
      SECRET_USERNAME: ((job_secret.username))
      SECRET_PASSWORD: ((job_secret.password))
      TEAM_SECRET: ((team_secret))
    config:
      platform: linux

      image_resource:
        type: mock
        source:
          mirror_self: true
          force_version: ((resource_version))

      params:
        SECRET:

      inputs:
      - name: assertion-script
      - name: some-resource
      - name: custom-resource
      - name: params-in-get
      - name: params-in-put

      run:
        path: sh

        # has to be executed as a file, otherwise 'fly watch' prints the
        # command
        args: [assertion-script/assert.sh]
