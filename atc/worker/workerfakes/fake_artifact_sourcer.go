// Code generated by counterfeiter. DO NOT EDIT.
package workerfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/concourse/atc/runtime"
	"github.com/concourse/concourse/atc/worker"
)

type FakeArtifactSourcer struct {
	SourceImageStub        func(lager.Logger, runtime.Artifact) (worker.StreamableArtifactSource, error)
	sourceImageMutex       sync.RWMutex
	sourceImageArgsForCall []struct {
		arg1 lager.Logger
		arg2 runtime.Artifact
	}
	sourceImageReturns struct {
		result1 worker.StreamableArtifactSource
		result2 error
	}
	sourceImageReturnsOnCall map[int]struct {
		result1 worker.StreamableArtifactSource
		result2 error
	}
	SourceInputsAndCachesStub        func(lager.Logger, int, map[string]runtime.Artifact) ([]worker.InputSource, error)
	sourceInputsAndCachesMutex       sync.RWMutex
	sourceInputsAndCachesArgsForCall []struct {
		arg1 lager.Logger
		arg2 int
		arg3 map[string]runtime.Artifact
	}
	sourceInputsAndCachesReturns struct {
		result1 []worker.InputSource
		result2 error
	}
	sourceInputsAndCachesReturnsOnCall map[int]struct {
		result1 []worker.InputSource
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeArtifactSourcer) SourceImage(arg1 lager.Logger, arg2 runtime.Artifact) (worker.StreamableArtifactSource, error) {
	fake.sourceImageMutex.Lock()
	ret, specificReturn := fake.sourceImageReturnsOnCall[len(fake.sourceImageArgsForCall)]
	fake.sourceImageArgsForCall = append(fake.sourceImageArgsForCall, struct {
		arg1 lager.Logger
		arg2 runtime.Artifact
	}{arg1, arg2})
	fake.recordInvocation("SourceImage", []interface{}{arg1, arg2})
	fake.sourceImageMutex.Unlock()
	if fake.SourceImageStub != nil {
		return fake.SourceImageStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.sourceImageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeArtifactSourcer) SourceImageCallCount() int {
	fake.sourceImageMutex.RLock()
	defer fake.sourceImageMutex.RUnlock()
	return len(fake.sourceImageArgsForCall)
}

func (fake *FakeArtifactSourcer) SourceImageCalls(stub func(lager.Logger, runtime.Artifact) (worker.StreamableArtifactSource, error)) {
	fake.sourceImageMutex.Lock()
	defer fake.sourceImageMutex.Unlock()
	fake.SourceImageStub = stub
}

func (fake *FakeArtifactSourcer) SourceImageArgsForCall(i int) (lager.Logger, runtime.Artifact) {
	fake.sourceImageMutex.RLock()
	defer fake.sourceImageMutex.RUnlock()
	argsForCall := fake.sourceImageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeArtifactSourcer) SourceImageReturns(result1 worker.StreamableArtifactSource, result2 error) {
	fake.sourceImageMutex.Lock()
	defer fake.sourceImageMutex.Unlock()
	fake.SourceImageStub = nil
	fake.sourceImageReturns = struct {
		result1 worker.StreamableArtifactSource
		result2 error
	}{result1, result2}
}

func (fake *FakeArtifactSourcer) SourceImageReturnsOnCall(i int, result1 worker.StreamableArtifactSource, result2 error) {
	fake.sourceImageMutex.Lock()
	defer fake.sourceImageMutex.Unlock()
	fake.SourceImageStub = nil
	if fake.sourceImageReturnsOnCall == nil {
		fake.sourceImageReturnsOnCall = make(map[int]struct {
			result1 worker.StreamableArtifactSource
			result2 error
		})
	}
	fake.sourceImageReturnsOnCall[i] = struct {
		result1 worker.StreamableArtifactSource
		result2 error
	}{result1, result2}
}

func (fake *FakeArtifactSourcer) SourceInputsAndCaches(arg1 lager.Logger, arg2 int, arg3 map[string]runtime.Artifact) ([]worker.InputSource, error) {
	fake.sourceInputsAndCachesMutex.Lock()
	ret, specificReturn := fake.sourceInputsAndCachesReturnsOnCall[len(fake.sourceInputsAndCachesArgsForCall)]
	fake.sourceInputsAndCachesArgsForCall = append(fake.sourceInputsAndCachesArgsForCall, struct {
		arg1 lager.Logger
		arg2 int
		arg3 map[string]runtime.Artifact
	}{arg1, arg2, arg3})
	fake.recordInvocation("SourceInputsAndCaches", []interface{}{arg1, arg2, arg3})
	fake.sourceInputsAndCachesMutex.Unlock()
	if fake.SourceInputsAndCachesStub != nil {
		return fake.SourceInputsAndCachesStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.sourceInputsAndCachesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeArtifactSourcer) SourceInputsAndCachesCallCount() int {
	fake.sourceInputsAndCachesMutex.RLock()
	defer fake.sourceInputsAndCachesMutex.RUnlock()
	return len(fake.sourceInputsAndCachesArgsForCall)
}

func (fake *FakeArtifactSourcer) SourceInputsAndCachesCalls(stub func(lager.Logger, int, map[string]runtime.Artifact) ([]worker.InputSource, error)) {
	fake.sourceInputsAndCachesMutex.Lock()
	defer fake.sourceInputsAndCachesMutex.Unlock()
	fake.SourceInputsAndCachesStub = stub
}

func (fake *FakeArtifactSourcer) SourceInputsAndCachesArgsForCall(i int) (lager.Logger, int, map[string]runtime.Artifact) {
	fake.sourceInputsAndCachesMutex.RLock()
	defer fake.sourceInputsAndCachesMutex.RUnlock()
	argsForCall := fake.sourceInputsAndCachesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeArtifactSourcer) SourceInputsAndCachesReturns(result1 []worker.InputSource, result2 error) {
	fake.sourceInputsAndCachesMutex.Lock()
	defer fake.sourceInputsAndCachesMutex.Unlock()
	fake.SourceInputsAndCachesStub = nil
	fake.sourceInputsAndCachesReturns = struct {
		result1 []worker.InputSource
		result2 error
	}{result1, result2}
}

func (fake *FakeArtifactSourcer) SourceInputsAndCachesReturnsOnCall(i int, result1 []worker.InputSource, result2 error) {
	fake.sourceInputsAndCachesMutex.Lock()
	defer fake.sourceInputsAndCachesMutex.Unlock()
	fake.SourceInputsAndCachesStub = nil
	if fake.sourceInputsAndCachesReturnsOnCall == nil {
		fake.sourceInputsAndCachesReturnsOnCall = make(map[int]struct {
			result1 []worker.InputSource
			result2 error
		})
	}
	fake.sourceInputsAndCachesReturnsOnCall[i] = struct {
		result1 []worker.InputSource
		result2 error
	}{result1, result2}
}

func (fake *FakeArtifactSourcer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sourceImageMutex.RLock()
	defer fake.sourceImageMutex.RUnlock()
	fake.sourceInputsAndCachesMutex.RLock()
	defer fake.sourceInputsAndCachesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeArtifactSourcer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.ArtifactSourcer = new(FakeArtifactSourcer)
